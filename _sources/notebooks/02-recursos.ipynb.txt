{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Recursos álgebra lineal"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conceptos básicos"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Matrices: ¿Qué representa una matriz?\n",
    "- Espacios vectoriales [wikipedia vector space](https://en.wikipedia.org/wiki/Change_of_basis)\n",
    "- Relaciones entre variables [Miserables coocurrence](https://bost.ocks.org/mike/miserables/)\n",
    "- Grafos [Matrices and graphs](https://t.co/Ep99lp1ty0)\n",
    "- Estructuras de datos [Titanic dataset analysis](https://www.kaggle.com/code/startupsci/titanic-data-science-solutions)\n",
    "- Matrices multidimensionales [Einops](https://einops.rocks/1-einops-basics/)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Operaciones con matrices\n",
    "\n",
    "- Producto escalar [Wikipedia dot product](https://en.wikipedia.org/wiki/Dot_product)\n",
    "- Producto elemento a elemento:\n",
    "  - [Máscaras de atención](https://www.researchgate.net/figure/Visualization-of-the-attention-masks-The-masks-in-same-column-are-from-the-same_fig4_335407972)\n",
    "  -  [Mecasnismo de atención en deep learning](https://towardsdatascience.com/transformers-explained-visually-part-3-multi-head-attention-deep-dive-1c1ff1024853)\n",
    "- Norma de un vector/distancia [K-nearest neighbors](https://scikit-learn.org/stable/modules/neighbors.html#classification)\n",
    "- Tipos de distancia [Metricas de distancia en data science](https://medium.com/geekculture/7-important-distance-metrics-every-data-scientist-should-know-11e1b0b2ebe3)\n",
    "- Cosine distance [Cosine similarity python for text](https://towardsdatascience.com/what-is-cosine-similarity-how-to-compare-text-and-images-in-python-d2bb6e411ef0)\n",
    "- Producto de matrices: \n",
    "   - [Redes neuronales](https://towardsdatascience.com/neural-net-from-scratch-using-numpy-71a31f6e3675)\n",
    "   - [Perceptron multicapa](https://jermwatt.github.io/machine_learning_refined/notes/13_Multilayer_perceptrons/13_2_Multi_layer_perceptrons.html)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Vectores y valores propios"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Explicación visual eigenvalues y eigenvectors [Visualizaciones y animaciones](https://setosa.io/ev/eigenvectors-and-eigenvalues/)\n",
    "- Markov chains:\n",
    "    - [Visualization on a graph](https://setosa.io/markov/index.html#%7B%22tm%22%3A%5B%5B0.5%2C0.2%2C0.2%5D%2C%5B0.2%2C0.5%2C0.3%5D%2C%5B0.1%2C0.3%2C0.7%5D%5D%7D)\n",
    "    - Ejemplo [Steady state computation using eigenvalues](https://medium.com/@andrew.chamberlain/using-eigenvectors-to-find-steady-state-population-flows-cd938f124764)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Singular value decomposition (SVD):\n",
    "  - Image compression [Example compression + theory](https://medium.com/mlearning-ai/svd-and-image-compression-749d59558410)\n",
    "  - Preprocessing for classification [Digit classification](https://towardsdatascience.com/how-to-use-singular-value-decomposition-svd-for-image-classification-in-python-20b1b2ac4990)\n",
    "- Principal component analysis (PCA):\n",
    "  - Explicacion visual [Graficos vectores y embedding paises](https://setosa.io/ev/principal-component-analysis/)\n",
    "  - Parametros algoritmo [Scikit-learn docs](https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html)\n",
    "- Support vector machines:\n",
    "  - Explicacion support vector classifier [](https://medium.com/@swetaprabha/support-vector-classifier-and-support-vector-machine-4a675b8cac88)\n",
    "  - Algoritmo en sklearn [SVC docs](https://scikit-learn.org/stable/modules/svm.html#svm-classification)\n",
    "\n",
    "- Diagonalización: [Pagerank](https://math.stackexchange.com/questions/936757/why-is-pagerank-an-eigenvector-problem)\n",
    "  \n",
    "\n",
    "  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Comparativa algoritmos ML [Visualization decision boundaries](https://scikit-learn.org/stable/auto_examples/classification/plot_classifier_comparison.html)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.15 ('algebra')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.15"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "7023cba2f29603a8a641d5935545fe36713999cae1fe159243ff5676bbe3b868"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
